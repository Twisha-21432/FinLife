# -*- coding: utf-8 -*-
"""FinLife_prototype.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14dw23X_M_NtCN-VPIGwIr8IHpDVmMs9M
"""

import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Set up display
width, height = 1300, 700
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('Financial Journey Game')

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Fonts
font = pygame.font.SysFont(None, 24)
large_font = pygame.font.SysFont(None, 36)

# Board setup
board_size = 10
tile_size = 60
board = [[0 for _ in range(board_size)] for _ in range(board_size)]

# Initialize board prompts
prompts = [
    "Start", "+2: Parents set up a savings account for the child", "-2: Parents forgot to budget for baby supplies", "+3: Received gifts of gold jewelry at birth", "-1: Parents bought too many baby clothes that were never used",
    "+2: Received money for the first birthday", "-3: Money spent on an expensive birthday party", "+2: Invested in a mutual fund", "-2: Stock market crash, investment halved", "+2: Parents set up an educational fund",
    "-3: Parents took a high-interest loan for unnecessary items", "+2: Baby shower gifts received", "-2: Parents bought an expensive stroller not needed", "+3: Received money for first food bite ceremony", "-1: Money spent on non-essential baby gadgets",
    "+2: Parents started a college fund", "-3: Parents didn't research and lost money in a bad investment", "+2: Received money for entering preschool", "-2: Parents bought toys instead of investing", "+2: Invested money in a high-interest savings account",
    "-3: Emergency expense drained savings", "+2: Parents received a financial literacy book as a gift", "-2: Ignored advice from the financial book", "+3: Grandparents gifted a valuable bond", "-2: Bond matured at a lower value than expected",
    "+3: Received money for first academic achievement", "-2: Spent the achievement money on a vacation", "+2: Parents invested in a diversified portfolio", "-2: Portfolio underperformed", "+2: Received money for starting main school",
    "-3: Spent money on expensive school supplies", "+2: Parents attended a financial planning workshop", "-2: Workshop advice not followed", "+3: Parents received a government grant for the child's education", "-2: Grant spent on non-educational expenses",
    "+2: Child won a local art competition, received prize money", "-3: Prize money spent on entertainment", "+2: Parents invested in a low-risk bond", "-1: Bond returns were lower than inflation", "+3: Received money for birthday from relatives",
    "-2: Birthday money spent on toys", "+2: Parents made a small investment in gold", "-1: Gold value dropped", "+2: Parents set up a health insurance plan for the child", "-2: Insurance premium increased unexpectedly",
    "+2: Received money for second academic achievement", "-2: Money spent on non-essential items", "+3: Parents started a side business to earn extra income", "-2: Business faced initial losses", "+2: Parents attended another financial literacy workshop",
    "+2: Advice followed, improved financial planning", "+2: Received money for annual birthday", "-2: Birthday money spent on parties", "+2: Parents invested in a child's savings bond", "-1: Savings bond matured, but with minimal interest",
    "+2: Parents received a tax refund for education expenses", "-2: Tax refund spent on luxury items", "+3: Child won a scholarship for an extracurricular activity", "-2: Scholarship money used for non-educational purposes", "+2: Parents invested in a child's college fund",
    "-2: College fund value decreased due to market conditions", "+2: Received money for entering higher classes", "-2: Money spent on unnecessary gadgets", "+2: Parents opened a high-interest account for the child", "-1: High-interest account returns were low",
    "+3: Child received a prize for a science project", "-2: Prize money spent on non-essential activities", "+2: Parents made a small real estate investment", "-2: Real estate value depreciated", "+3: Parents received an inheritance for the child",
    "-3: Inheritance invested poorly", "+2: Child received money for third academic achievement", "-2: Money spent on entertainment", "+2: Parents attended an advanced financial planning workshop", "+2: Advanced workshop advice followed",
    "+2: Received money for annual birthday", "-2: Money spent on expensive hobbies", "+2: Parents invested in a diverse mutual fund", "-1: Mutual fund returns were lower than expected", "+2: Parents received a grant for the child's extracurricular activities",
    "-2: Grant spent on non-educational expenses", "+3: Child won a local sports competition, received prize money", "-2: Prize money spent on entertainment", "+2: Parents invested in a long-term bond", "-1: Long-term bond value decreased",
    "+2: Received money for entering senior classes", "-2: Money spent on unnecessary gadgets", "+3: Parents set up a trust fund for the child", "-2: Trust fund faced administrative fees", "+3: Child received a national award for academic excellence",
    "-2: Award money used for non-essential purposes", "+2: Parents invested in a child's health and wellness", "-2: Health expenses unexpectedly increased", "+2: Received money for annual birthday", "-2: Birthday money spent on luxury items",
    "+2: Parents received a government subsidy for child's education", "-2: Subsidy used for non-educational expenses", "+3: Child received a special grant for a project", "-2: Grant money spent on non-essential activities", "End of Level 1: Child's financial foundation is set!"
]

# Player setup
players = [{'name': 'Player 1', 'color': RED, 'position': 0}, {'name': 'Player 2', 'color': BLUE, 'position': 0}]
current_player_index = 0
dice_roll = 0
prompt_message = ""

# Function to draw the board
def draw_board():
    screen.fill(WHITE)
    for row in range(board_size):
        for col in range(board_size):
            tile_number = row * board_size + col + 1
            if row % 2 == 0:
                tile_number = row * board_size + col + 1
            else:
                tile_number = row * board_size + (board_size - 1 - col) + 1
            pygame.draw.rect(screen, BLACK, (col * tile_size, row * tile_size, tile_size, tile_size), 1)
            text = font.render(str(tile_number), True, BLACK)
            screen.blit(text, (col * tile_size + 20, row * tile_size + 20))

# Function to draw players
def draw_players():
    for player in players:
        if player['position'] == 0:
            continue
        row = (player['position'] - 1) // board_size
        col = (player['position'] - 1) % board_size
        if row % 2 != 0:
            col = board_size - 1 - col
        pygame.draw.circle(screen, player['color'], (col * tile_size + 30, row * tile_size + 30), 20)

# Function to draw the dice
def draw_dice():
    dice_text = large_font.render(f"Dice: {dice_roll}", True, BLACK)
    screen.blit(dice_text, (650, 50))

# Function to draw the prompt message
def draw_prompt():
    lines = prompt_message.split(": ")
    for i, line in enumerate(lines):
        prompt_text = font.render(line, True, BLACK)
        screen.blit(prompt_text, (750, 150 + i * 30))

# Function to handle the prompt effects
def handle_prompt(player):
    global prompt_message
    position = player['position']
    if position > 0 and position <= 100:
        prompt = prompts[position - 1]
        prompt_message = prompt
        if prompt.startswith('+'):
            player['position'] += int(prompt[1])
        elif prompt.startswith('-'):
            player['position'] -= int(prompt[1])
        player['position'] = max(1, min(player['position'], 100))

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    screen.fill(WHITE)
    draw_board()
    draw_players()
    draw_dice()
    draw_prompt()

    if players[current_player_index]['position'] < 100:
        if current_player_index == 0:
            keys = pygame.key.get_pressed()
            if keys[pygame.K_SPACE]:
                dice_roll = random.randint(1, 6)
                players[current_player_index]['position'] += dice_roll
                handle_prompt(players[current_player_index])
                current_player_index = (current_player_index + 1) % len(players)
                time.sleep(1)
        else:
            dice_roll = random.randint(1, 6)
            players[current_player_index]['position'] += dice_roll
            handle_prompt(players[current_player_index])
            current_player_index = (current_player_index + 1)
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    screen.fill(WHITE)
    draw_board()
    draw_players()
    draw_dice()
    draw_prompt()

    if players[current_player_index]['position'] < 100:
        if current_player_index == 0:
            keys = pygame.key.get_pressed()
            if keys[pygame.K_SPACE]:
                dice_roll = random.randint(1, 6)
                players[current_player_index]['position'] += dice_roll
                handle_prompt(players[current_player_index])
                current_player_index = (current_player_index + 1) % len(players)
                time.sleep(1)
        else:
            dice_roll = random.randint(1, 6)
            players[current_player_index]['position'] += dice_roll
            handle_prompt(players[current_player_index])
            current_player_index = (current_player_index + 1) % len(players)
            time.sleep(1)

    pygame.display.flip()

pygame.quit()